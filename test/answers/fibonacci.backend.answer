
.text
.globl slow_fibonacci
slow_fibonacci:
    pushl %ebp
    movl  %esp, %ebp
    movl  $2, %eax
    pushl %eax
    lea   8(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    cmp   %ecx, %eax
    setle %al
    movzbl %al, %eax
    test  %eax, %eax
    jz    if_end0
    movl  $1, %eax
    movl  %ebp, %esp
    popl  %ebp
    ret
if_end0:
    movl  $2, %eax
    pushl %eax
    lea   8(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    subl  %ecx, %eax
    pushl %eax
    call  slow_fibonacci
    addl  $4, %esp
    pushl %eax
    movl  $1, %eax
    pushl %eax
    lea   8(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    subl  %ecx, %eax
    pushl %eax
    call  slow_fibonacci
    addl  $4, %esp
    popl  %ecx
    addl  %ecx, %eax
    movl  %ebp, %esp
    popl  %ebp
    ret

.globl fast_fibonacci
fast_fibonacci:
    pushl %ebp
    movl  %esp, %ebp
    subl  $8, %esp
# prev1 = 1;
    lea   -4(%ebp), %eax
    pushl %eax
    movl  $1, %eax
    popl  %ecx
    movl  %eax, (%ecx)
# prev2 = 1;
    lea   -8(%ebp), %eax
    pushl %eax
    movl  $1, %eax
    popl  %ecx
    movl  %eax, (%ecx)
while_begin1:
    movl  $2, %eax
    pushl %eax
    lea   8(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    cmp   %ecx, %eax
    setg  %al
    movzbl %al, %eax
    test  %eax, %eax
    jz    while_end2
    subl  $12, %esp
# temp = prev1;
    lea   -12(%ebp), %eax
    pushl %eax
    lea   -4(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    movl  %eax, (%ecx)
# prev1 = prev2;
    lea   -4(%ebp), %eax
    pushl %eax
    lea   -8(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    movl  %eax, (%ecx)
# prev2 = (temp + prev2);
    lea   -8(%ebp), %eax
    pushl %eax
    lea   -8(%ebp), %eax
    movl  (%eax), %eax
    pushl %eax
    lea   -12(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    addl  %ecx, %eax
    popl  %ecx
    movl  %eax, (%ecx)
# n = (n - 1);
    lea   8(%ebp), %eax
    pushl %eax
    movl  $1, %eax
    pushl %eax
    lea   8(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    subl  %ecx, %eax
    popl  %ecx
    movl  %eax, (%ecx)
    addl  $12, %esp
    jmp   while_begin1
while_end2:
    lea   -8(%ebp), %eax
    movl  (%eax), %eax
    movl  %ebp, %esp
    popl  %ebp
    ret

.globl monga_main
monga_main:
    pushl %ebp
    movl  %esp, %ebp
    movl  $6, %eax
    pushl %eax
    call  slow_fibonacci
    addl  $4, %esp
    movl  %ebp, %esp
    popl  %ebp
    ret

