
.text
# int slow_fibonacci(int n)
.globl slow_fibonacci
slow_fibonacci:
    pushl %ebp
    movl  %esp, %ebp
# {
# if (n <= 2)
    movl  $2, %eax
    pushl %eax
    lea   8(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    cmpl  %ecx, %eax
    setle %al
    movzbl %al, %eax
    test  %eax, %eax
    jz    if_end0
# {
# return 1;
    movl  $1, %eax
    movl  %ebp, %esp
    popl  %ebp
    ret
# }
if_end0:
# return (slow_fibonacci((n - 1)) + slow_fibonacci((n - 2)));
    movl  $2, %eax
    pushl %eax
    lea   8(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    subl  %ecx, %eax #
    pushl %eax
    call  slow_fibonacci
    addl  $4, %esp
    pushl %eax
    movl  $1, %eax
    pushl %eax
    lea   8(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    subl  %ecx, %eax #
    pushl %eax
    call  slow_fibonacci
    addl  $4, %esp
    popl  %ecx
    addl  %ecx, %eax #
    movl  %ebp, %esp
    popl  %ebp
    ret
# }

# int fast_fibonacci(int n)
.globl fast_fibonacci
fast_fibonacci:
    pushl %ebp
    movl  %esp, %ebp
# {
    subl  $8, %esp
# prev1 = 1;
    movl  $1, %eax
    pushl %eax
    lea   -4(%ebp), %eax
    popl  %ecx
    movl  %ecx, (%eax)
# prev2 = 1;
    movl  $1, %eax
    pushl %eax
    lea   -8(%ebp), %eax
    popl  %ecx
    movl  %ecx, (%eax)
while_begin1:
# while (n > 2)
    movl  $2, %eax
    pushl %eax
    lea   8(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    cmpl  %ecx, %eax
    setg  %al
    movzbl %al, %eax
    test  %eax, %eax
    jz    while_end2
# {
    subl  $12, %esp
# temp = prev1;
    lea   -4(%ebp), %eax
    movl  (%eax), %eax
    pushl %eax
    lea   -12(%ebp), %eax
    popl  %ecx
    movl  %ecx, (%eax)
# prev1 = prev2;
    lea   -8(%ebp), %eax
    movl  (%eax), %eax
    pushl %eax
    lea   -4(%ebp), %eax
    popl  %ecx
    movl  %ecx, (%eax)
# prev2 = (temp + prev2);
    lea   -8(%ebp), %eax
    movl  (%eax), %eax
    pushl %eax
    lea   -12(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    addl  %ecx, %eax #
    pushl %eax
    lea   -8(%ebp), %eax
    popl  %ecx
    movl  %ecx, (%eax)
# n = (n - 1);
    movl  $1, %eax
    pushl %eax
    lea   8(%ebp), %eax
    movl  (%eax), %eax
    popl  %ecx
    subl  %ecx, %eax #
    pushl %eax
    lea   8(%ebp), %eax
    popl  %ecx
    movl  %ecx, (%eax)
    addl  $12, %esp
# }
    jmp   while_begin1
while_end2:
# return prev2;
    lea   -8(%ebp), %eax
    movl  (%eax), %eax
    movl  %ebp, %esp
    popl  %ebp
    ret
# }

# int monga_main()
.globl monga_main
monga_main:
    pushl %ebp
    movl  %esp, %ebp
# {
# return slow_fibonacci(6);
    movl  $6, %eax
    pushl %eax
    call  slow_fibonacci
    addl  $4, %esp
    movl  %ebp, %esp
    popl  %ebp
    ret
# }

